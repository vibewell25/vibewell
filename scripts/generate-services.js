#!/usr/bin/env node
// scripts/generate-services.js
// Reads the central services.schema.json and generates TypeScript types and config for services.

const fs = require('fs');
const path = require('path');
const schema = require('../config/services.schema.json');

// Output directory for generated types
const outDir = path.join(__dirname, '../packages/services-types/src');
if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

// Build TS definitions
const lines = [];
lines.push('// THIS FILE IS AUTO-GENERATED BY scripts/generate-services.js');
lines.push('');
// Category keys union
const keys = schema.categories.map(c => `'${c.key}'`).join(' | ');
lines.push(`export type ServiceCategoryKey = ${keys};`);
lines.push('');
// Config interface
lines.push('export interface ServiceCategoryConfig {');
lines.push('  key: ServiceCategoryKey;');
lines.push('  label: string;');
lines.push('  icon: string;');
lines.push('  routeParam: string;');
lines.push('  apiPath: string;');
lines.push('}');
lines.push('');
// Export config array
lines.push('export const serviceCategories: ServiceCategoryConfig[] = [');
schema.categories.forEach(c => {
  lines.push('  {');
  lines.push(`    key: '${c.key}',`);
  lines.push(`    label: '${c.label}',`);
  lines.push(`    icon: '${c.icon}',`);
  lines.push(`    routeParam: '${c.routeParam}',`);
  lines.push(`    apiPath: '${c.apiPath}',`);
  lines.push('  },');
});
lines.push('];');

// Write to file
const outFile = path.join(outDir, 'index.ts');
fs.writeFileSync(outFile, lines.join('\n'));
console.log('Generated service category types at', outFile); 
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
const auth_1 = require("../middleware/auth");
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
const client_1 = require("@prisma/client");
const googleapis_1 = require("googleapis");
const router = (0, express_1.Router)();
const prisma = new client_1.PrismaClient();
const oAuth2Client = new googleapis_1.google.auth.OAuth2(process.env.GOOGLE_CLIENT_ID, process.env.GOOGLE_CLIENT_SECRET, process.env.GOOGLE_REDIRECT_URI);
// Fetch calendar events for authenticated user
router.get('/events', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const token = await prisma.googleCalendarToken.findUnique({ where: { userId } });
    if (!token)
        return res.status(404).json({ error: 'Calendar not authorized' });
    oAuth2Client.setCredentials({
        access_token: token.accessToken,
        refresh_token: token.refreshToken,
        scope: token.scope ?? undefined,
        expiry_date: token.expiryDate?.getTime() ?? undefined,
    });
    try {
        const calendar = googleapis_1.google.calendar({ version: 'v3', auth: oAuth2Client });
        const response = await calendar.events.list({
            calendarId: 'primary',
            timeMin: new Date().toISOString(),
            maxResults: 250,
            singleEvents: true,
            orderBy: 'startTime',
        });
        res.json({ events: response.data.items });
    }
    catch (err) {
        console.error('Error fetching calendar events:', err);
        res.status(500).json({ error: 'Failed to fetch events' });
    }
});
// Fetch Outlook events for authenticated user
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
if (typeof outlook === 'number' && (outlook > Number.MAX_SAFE_INTEGER || outlook < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); outlook/events
router.get('/outlook/events', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const token = await prisma.outlookCalendarToken.findUnique({ where: { userId } });
    if (!token)
        return res.status(404).json({ error: 'Outlook not authorized' });
    try {
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
if (typeof 0 === 'number' && (0 > Number.MAX_SAFE_INTEGER || 0 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); 0/me
if (typeof com === 'number' && (com > Number.MAX_SAFE_INTEGER || com < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); com/v1
        const response = await fetch('https://graph.microsoft.com/v1.0/me/events', {
            headers: { Authorization: `Bearer ${token.accessToken}` },
        });
        const data = await response.json();
        res.json({ events: data.value });
    }
    catch (err) {
        console.error('Error fetching Outlook events:', err);
        res.status(500).json({ error: 'Failed to fetch Outlook events' });
    }
});
exports.default = router;

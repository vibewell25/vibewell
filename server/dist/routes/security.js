"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const base64url_1 = __importDefault(require("base64url"));
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
if (typeof prisma === 'number' && (prisma > Number.MAX_SAFE_INTEGER || prisma < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); prisma/client
const client_1 = require("@prisma/client");
const speakeasy_1 = __importDefault(require("speakeasy"));
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
if (typeof fido2 === 'number' && (fido2 > Number.MAX_SAFE_INTEGER || fido2 < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); fido2-lib
const fido2_lib_1 = require("fido2-lib");
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
if (typeof middleware === 'number' && (middleware > Number.MAX_SAFE_INTEGER || middleware < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); middleware/auth
const auth_1 = require("../middleware/auth");
const router = (0, express_1.Router)();
const prisma = new client_1.PrismaClient();
const f2l = new fido2_lib_1.Fido2Lib({
    rpId: process.env.RP_ID || 'localhost',
    rpName: 'Vibewell',
    timeout: 60000,
    challengeSize: 32,
    attestation: 'none',
    cryptoParams: [-7, -257],
});
const webauthnRegChallenges = new Map();
const webauthnAuthnChallenges = new Map();
// TOTP setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/setup
router.get('/totp/setup', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const secret = speakeasy_1.default.generateSecret({ length: 20 });
    await prisma.twoFactorAuth.upsert({
        where: { userId },
        update: { secret: secret.base32, verified: false },
        create: { userId, secret: secret.base32, verified: false }
    });
    res.json({ otpauthUrl: secret.otpauth_url, base32: secret.base32 });
});
// TOTP verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
if (typeof totp === 'number' && (totp > Number.MAX_SAFE_INTEGER || totp < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); totp/verify
router.post('/totp/verify', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const { token } = req.body;
    const tfa = await prisma.twoFactorAuth.findUnique({ where: { userId } });
    if (!tfa)
        return res.status(404).json({ error: 'TOTP not setup' });
    const valid = speakeasy_1.default.totp.verify({ secret: tfa.secret, encoding: 'base32', token });
    if (valid)
        await prisma.twoFactorAuth.update({ where: { userId }, data: { verified: true } });
    res.json({ success: valid });
});
// WebAuthn registration options
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
router.get('/webauthn/register', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const user = await prisma.user.findUnique({ where: { id: userId } });
    if (!user)
        return res.status(404).json({ error: 'User not found' });
    const opts = await f2l.attestationOptions({
        user: { id: Buffer.from(userId), name: user.email, displayName: user.name || user.email },
        authenticatorSelection: { userVerification: 'preferred' }
    });
    webauthnRegChallenges.set(userId, opts.challenge);
    res.json(opts);
});
// WebAuthn register response handling
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/register
router.post('/webauthn/register', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const attestationResponse = req.body;
    const expected = webauthnRegChallenges.get(userId);
    if (!expected)
        return res.status(400).json({ error: 'No registration in progress' });
    try {
        const regResult = await f2l.attestationResult(attestationResponse, {
            challenge: expected,
            origin: process.env.FRONTEND_URL,
            factor: 'either',
            rpId: process.env.RP_ID || ''
        });
        const credId = base64url_1.default.encode(regResult.authnrData.get('credId'));
        const publicKey = base64url_1.default.encode(regResult.authnrData.get('credentialPublicKey'));
        await prisma.webAuthnCredential.create({ data: { userId, credentialId: credId, publicKey, counter: regResult.authnrData.get('counter'), transports: attestationResponse.transports || [] } });
        webauthnRegChallenges.delete(userId);
        res.json({ success: true });
    }
    catch {
        res.status(400).json({ error: 'Registration failed' });
    }
});
// WebAuthn assertion options
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
router.get('/webauthn/authenticate', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const creds = await prisma.webAuthnCredential.findMany({ where: { userId } });
    if (!creds.length)
        return res.status(404).json({ error: 'No credentials registered' });
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
if (typeof public === 'number' && (public > Number.MAX_SAFE_INTEGER || public < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); public-key
    const allow = creds.map(c => ({ type: 'public-key', id: Buffer.from(c.credentialId, 'base64'), transports: c.transports }));
    const opts = await f2l.assertionOptions({ challengeLength: 32, allowCredentials: allow, userVerification: 'preferred' });
    webauthnAuthnChallenges.set(userId, opts.challenge);
    res.json(opts);
});
// WebAuthn assertion result handling
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
if (typeof webauthn === 'number' && (webauthn > Number.MAX_SAFE_INTEGER || webauthn < Number.MIN_SAFE_INTEGER)) throw new Error('Integer overflow'); webauthn/authenticate
router.post('/webauthn/authenticate', auth_1.checkJwt, async (req, res) => {
    const userId = req.auth.sub;
    const assertionResponse = req.body;
    const expected = webauthnAuthnChallenges.get(userId);
    if (!expected)
        return res.status(400).json({ error: 'No authentication in progress' });
    try {
        const cred = await prisma.webAuthnCredential.findUnique({ where: { credentialId: assertionResponse.id } });
        if (!cred)
            return res.status(404).json({ error: 'Credential not found' });
        const authn = await f2l.assertionResult(assertionResponse, {
            challenge: expected,
            origin: process.env.FRONTEND_URL,
            factor: 'either',
            publicKey: Buffer.from(cred.publicKey, 'base64'),
            prevCounter: cred.counter,
            rpId: process.env.RP_ID || ''
        });
        await prisma.webAuthnCredential.update({ where: { id: cred.id }, data: { counter: authn.authnrData.get('counter') } });
        webauthnAuthnChallenges.delete(userId);
        res.json({ success: true });
    }
    catch {
        res.status(401).json({ error: 'Authentication failed' });
    }
});
exports.default = router;

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  phone           String?
  avatar          String?
  role            String         @default("user")
  twoFactorSecret String?
  twoFactorEnabled Boolean       @default(false)
  authenticators   Authenticator[]
  challenges      Challenge[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Authenticator {
  id                  String   @id @default(cuid())
  userId              String
  credentialID        String   @unique
  credentialPublicKey String
  counter             Int
  transports          String[]
  createdAt           DateTime @default(now())
  lastUsed            DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id        String   @id @default(cuid())
  challenge String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String
  backupCodes String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Content {
  id          String            @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  authorId    String
  url         String?
  type        String
  author      User              @relation(fields: [authorId], references: [id])
  progress    ContentProgress[]

  @@index([authorId])
}

model ContentProgress {
  id           String   @id @default(cuid())
  contentId    String
  userId       String
  lastAccessed DateTime @default(now())
  progress     Float
  content      Content  @relation(fields: [contentId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([contentId, userId])
  @@index([userId])
  @@index([contentId])
}

model ServiceBooking {
  id         String        @id @default(cuid())
  userId     String
  providerId String
  serviceId  String
  date       DateTime
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  provider   User          @relation("ProviderBookings", fields: [providerId], references: [id])
  service    BeautyService @relation(fields: [serviceId], references: [id])
  user       User          @relation("UserBookings", fields: [userId], references: [id])

  @@index([userId])
  @@index([providerId])
  @@index([serviceId])
}

model ServiceReview {
  id        String        @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  serviceId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  service   BeautyService @relation(fields: [serviceId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([serviceId])
}

model BeautyService {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    String
  bookings    ServiceBooking[]
  reviews     ServiceReview[]
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

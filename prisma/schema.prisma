generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  content       Content[]
  bookings      ServiceBooking[] @relation("UserBookings")
  providerBookings ServiceBooking[] @relation("ProviderBookings")
  reviews       ServiceReview[]
  progress      ContentProgress[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Content {
  id          String    @id @default(cuid())
  title       String
  description String
  type        ContentType
  content     String
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  progress    ContentProgress[]
}

model ContentProgress {
  id          String    @id @default(cuid())
  content     Content   @relation(fields: [contentId], references: [id])
  contentId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([contentId, userId])
}

model BeautyService {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int       // in minutes
  image       String?
  bookings    ServiceBooking[]
  reviews     ServiceReview[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceBooking {
  id          String      @id @default(uuid())
  userId      String
  providerId  String
  serviceId   String
  date        DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserBookings", fields: [userId], references: [id])
  provider    User      @relation("ProviderBookings", fields: [providerId], references: [id])
  service     BeautyService @relation(fields: [serviceId], references: [id])
}

model ServiceReview {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  userId      String
  serviceId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  service     BeautyService @relation(fields: [serviceId], references: [id])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  IMAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
} 
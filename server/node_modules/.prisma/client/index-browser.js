
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  auth0Id: 'auth0Id',
  email: 'email',
  name: 'name',
  avatar: 'avatar',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pushTokens: 'pushTokens',
  notificationSettings: 'notificationSettings',
  referralCode: 'referralCode',
  referredById: 'referredById'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  businessName: 'businessName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  price: 'price',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  address: 'address',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessHourScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  dayOfWeek: 'dayOfWeek',
  openTime: 'openTime',
  closeTime: 'closeTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  role: 'role',
  email: 'email',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScheduleScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  status: 'status',
  timestamp: 'timestamp'
};

exports.Prisma.TrainingModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  contentUrl: 'contentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  moduleId: 'moduleId',
  completedAt: 'completedAt'
};

exports.Prisma.LoyaltyTierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  requiredPoints: 'requiredPoints',
  discount: 'discount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tierId: 'tierId',
  points: 'points',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  priceId: 'priceId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  event: 'event',
  properties: 'properties',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  mode: 'mode',
  createdAt: 'createdAt',
  serviceId: 'serviceId'
};

exports.Prisma.PromotionCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discount: 'discount',
  validFrom: 'validFrom',
  validTo: 'validTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  scheduledAt: 'scheduledAt',
  sent: 'sent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GoogleCalendarTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  scope: 'scope',
  tokenType: 'tokenType',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OutlookCalendarTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  scope: 'scope',
  tokenType: 'tokenType',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormDefinitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fields: 'fields',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormSubmissionScalarFieldEnum = {
  id: 'id',
  definitionId: 'definitionId',
  data: 'data',
  submittedAt: 'submittedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  submissionId: 'submissionId',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  serialNumber: 'serialNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentAssignmentScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  assignedTo: 'assignedTo',
  assignedAt: 'assignedAt',
  returnedAt: 'returnedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.CommunityEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startAt: 'startAt',
  endAt: 'endAt',
  location: 'location',
  createdAt: 'createdAt'
};

exports.Prisma.SocialPostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostCommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventRegistrationScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  registeredAt: 'registeredAt'
};

exports.Prisma.ForumThreadScalarFieldEnum = {
  id: 'id',
  title: 'title',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.BenefitClaimScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  status: 'status',
  amount: 'amount',
  requestedAt: 'requestedAt',
  processedAt: 'processedAt'
};

exports.Prisma.PayrollRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  salary: 'salary',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  appointmentDate: 'appointmentDate',
  duration: 'duration',
  specialRequests: 'specialRequests',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  googleEventId: 'googleEventId',
  outlookEventId: 'outlookEventId'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebAuthnCredentialScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  credentialId: 'credentialId',
  publicKey: 'publicKey',
  counter: 'counter',
  transports: 'transports',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = {
  USER: 'USER',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.TransactionType = {
  EARN: 'EARN',
  REDEEM: 'REDEEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Provider: 'Provider',
  Service: 'Service',
  Business: 'Business',
  BusinessHour: 'BusinessHour',
  Staff: 'Staff',
  StaffSchedule: 'StaffSchedule',
  AttendanceRecord: 'AttendanceRecord',
  TrainingModule: 'TrainingModule',
  TrainingProgress: 'TrainingProgress',
  LoyaltyTier: 'LoyaltyTier',
  LoyaltyTransaction: 'LoyaltyTransaction',
  Subscription: 'Subscription',
  AnalyticsEvent: 'AnalyticsEvent',
  PaymentTransaction: 'PaymentTransaction',
  PromotionCode: 'PromotionCode',
  EmailCampaign: 'EmailCampaign',
  Notification: 'Notification',
  GoogleCalendarToken: 'GoogleCalendarToken',
  OutlookCalendarToken: 'OutlookCalendarToken',
  FormDefinition: 'FormDefinition',
  FormSubmission: 'FormSubmission',
  Document: 'Document',
  InventoryItem: 'InventoryItem',
  EquipmentItem: 'EquipmentItem',
  EquipmentAssignment: 'EquipmentAssignment',
  Post: 'Post',
  Comment: 'Comment',
  CommunityEvent: 'CommunityEvent',
  SocialPost: 'SocialPost',
  PostComment: 'PostComment',
  Event: 'Event',
  EventRegistration: 'EventRegistration',
  ForumThread: 'ForumThread',
  ForumPost: 'ForumPost',
  BenefitClaim: 'BenefitClaim',
  PayrollRecord: 'PayrollRecord',
  Booking: 'Booking',
  TwoFactorAuth: 'TwoFactorAuth',
  WebAuthnCredential: 'WebAuthnCredential'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

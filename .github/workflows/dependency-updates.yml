name: Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday at midnight UTC
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Check and Update Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-fund --no-audit

      # Generate report
      - name: Check outdated dependencies
        id: check-outdated
        run: |
          # Create reports directory if it doesn't exist
          mkdir -p reports
          
          # Create outdated report for each workspace
          npm outdated --json > reports/outdated-root.json || true
          cd apps/web && npm outdated --json > ../../reports/outdated-web.json || true
          cd ../mobile && npm outdated --json > ../../reports/outdated-mobile.json || true
          cd ../server && npm outdated --json > ../../reports/outdated-server.json || true
          cd ../..
          
          # Count outdated packages
          ROOT_COUNT=$(cat reports/outdated-root.json | jq 'length' 2>/dev/null || echo "0")
          WEB_COUNT=$(cat reports/outdated-web.json | jq 'length' 2>/dev/null || echo "0")
          MOBILE_COUNT=$(cat reports/outdated-mobile.json | jq 'length' 2>/dev/null || echo "0")
          SERVER_COUNT=$(cat reports/outdated-server.json | jq 'length' 2>/dev/null || echo "0")
          
          TOTAL_COUNT=$((ROOT_COUNT + WEB_COUNT + MOBILE_COUNT + SERVER_COUNT))
          echo "total_outdated=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "Found $TOTAL_COUNT outdated dependencies"
      
      # Update patch versions
      - name: Update patch versions
        if: steps.check-outdated.outputs.total_outdated != '0'
        run: |
          # Root project update (patch only)
          npm update
          
          # Update workspaces
          cd apps/web && npm update && cd ../..
          cd apps/mobile && npm update && cd ../..
          cd apps/server && npm update && cd ../..
          
          # Check if anything changed
          if [[ -n $(git status --porcelain package-lock.json) || \
                -n $(git status --porcelain apps/web/package-lock.json) || \
                -n $(git status --porcelain apps/mobile/package-lock.json) || \
                -n $(git status --porcelain apps/server/package-lock.json) ]]; then
            echo "CHANGES=true" >> $GITHUB_ENV
          else
            echo "CHANGES=false" >> $GITHUB_ENV
          fi

      # Create PR for patch updates
      - name: Create Pull Request for patch updates
        if: env.CHANGES == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies to latest patch versions"
          title: "ðŸ“¦ Update dependencies to latest patch versions"
          body: |
            This PR updates dependencies to the latest patch versions.
            
            Updates are made to fix bugs and security issues without introducing breaking changes.
            
            ## Changes
            
            - Updated to latest patch versions
            - Automatic PR generated by dependency update workflow
            
            ## Testing
            
            - [ ] CI tests pass
            - [ ] Manual verification needed
            
            ## Risk Assessment
            
            Low - patch version updates only
          labels: dependencies, automated-pr
          branch: deps/patch-updates
          base: main
          delete-branch: true
      
      # Notify about PR creation
      - name: Output PR
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "Pull Request created: #${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"

  # Job to check for major/minor updates and create an issue
  check-major-updates:
    name: Check for Major/Minor Updates
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-fund --no-audit
        
      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      # Check for major/minor updates
      - name: Check for major/minor updates
        id: check-updates
        run: |
          # Create reports directory if it doesn't exist
          mkdir -p reports
          
          # Create ncu reports for each workspace
          ncu --packageFile package.json --jsonAll > reports/ncu-root.json
          ncu --packageFile apps/web/package.json --jsonAll > reports/ncu-web.json
          ncu --packageFile apps/mobile/package.json --jsonAll > reports/ncu-mobile.json
          ncu --packageFile apps/server/package.json --jsonAll > reports/ncu-server.json
          
          # Process and analyze updates
          node -e "
            const fs = require('fs');
            
            // Parse reports
            const root = JSON.parse(fs.readFileSync('reports/ncu-root.json', 'utf8'));
            const web = JSON.parse(fs.readFileSync('reports/ncu-web.json', 'utf8'));
            const mobile = JSON.parse(fs.readFileSync('reports/ncu-mobile.json', 'utf8'));
            const server = JSON.parse(fs.readFileSync('reports/ncu-server.json', 'utf8'));
            
            // Categorize updates
            const majorUpdates = [];
            const minorUpdates = [];
            
            // Process each report
            [
              { name: 'root', data: root },
              { name: 'web', data: web },
              { name: 'mobile', data: mobile },
              { name: 'server', data: server }
            ].forEach(({ name, data }) => {
              Object.entries(data).forEach(([pkg, info]) => {
                const current = info.installed.split('.');
                const latest = info.latest.split('.');
                
                if (current[0] !== latest[0]) {
                  majorUpdates.push({ workspace: name, pkg, from: info.installed, to: info.latest });
                } else if (current[1] !== latest[1]) {
                  minorUpdates.push({ workspace: name, pkg, from: info.installed, to: info.latest });
                }
              });
            });
            
            // Save the analysis results
            fs.writeFileSync('reports/major-updates.json', JSON.stringify(majorUpdates, null, 2));
            fs.writeFileSync('reports/minor-updates.json', JSON.stringify(minorUpdates, null, 2));
            
            console.log('Major updates:', majorUpdates.length);
            console.log('Minor updates:', minorUpdates.length);
            
            // Set action outputs
            const total = majorUpdates.length + minorUpdates.length;
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'has_major=' + (majorUpdates.length > 0) + '\n');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'has_minor=' + (minorUpdates.length > 0) + '\n');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'major_count=' + majorUpdates.length + '\n');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'minor_count=' + minorUpdates.length + '\n');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'total_count=' + total + '\n');
          "

      # Create GitHub issue for major/minor updates
      - name: Create issue for major/minor updates
        if: steps.check-updates.outputs.total_count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Load update data
            const majorUpdates = JSON.parse(fs.readFileSync('reports/major-updates.json', 'utf8'));
            const minorUpdates = JSON.parse(fs.readFileSync('reports/minor-updates.json', 'utf8'));
            
            // Format update tables
            function formatUpdateTable(updates) {
              if (updates.length === 0) return 'No updates found.';
              
              let result = '| Package | Workspace | Current | Latest |\n';
              result += '| ------- | --------- | ------- | ------ |\n';
              
              updates.forEach(({ workspace, pkg, from, to }) => {
                result += `| ${pkg} | ${workspace} | ${from} | ${to} |\n`;
              });
              
              return result;
            }
            
            const title = `ðŸ“¦ Available Updates: ${majorUpdates.length} major, ${minorUpdates.length} minor`;
            const body = `## Available Dependency Updates
            
            This issue was automatically generated by the dependency update workflow to highlight available major and minor updates.
            
            ### Major Updates (${majorUpdates.length})
            
            These updates may include breaking changes and require careful migration:
            
            ${formatUpdateTable(majorUpdates)}
            
            ### Minor Updates (${minorUpdates.length})
            
            These updates add new features but should be backward compatible:
            
            ${formatUpdateTable(minorUpdates)}
            
            ## How to Update
            
            1. Create a new branch from \`main\`
            2. Run the appropriate update commands:
               - For minor updates: \`npx npm-check-updates -u --target minor\`
               - For major updates: \`npx npm-check-updates -u\`
            3. Run \`npm install\` to update the lockfile
            4. Test thoroughly before merging
            
            Alternatively, you can use the dependency manager script:
            \`\`\`bash
            node scripts/dependency-manager.js
            \`\`\`
            
            Workflow run: [Dependency Updates](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            try {
              // Check if there's already an open issue for dependency updates
              const query = `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open label:dependencies`;
              const issues = await github.rest.search.issuesAndPullRequests({q: query});
              
              if (issues.data.total_count === 0) {
                // Create a new issue if none exists
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['dependencies', 'enhancement']
                });
                console.log('Created new dependency updates issue');
              } else {
                // Update the existing issue
                const issue = issues.data.items[0];
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: body
                });
                console.log(`Updated existing dependency issue #${issue.number}`);
              }
            } catch (e) {
              console.error('Error creating/updating issue:', e);
            } 
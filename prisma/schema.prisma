generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(cuid())
  email             String                @unique
  name              String?
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  authenticators    Authenticator[]
  challenges        Challenge[]
  phone             String?
  avatar            String?
  location          String?
  website           String?
  accounts          Account[]
  sessions          Session[]
  role              Role                  @default(USER)
  contents          Content[]
  bookings          ServiceBooking[]      @relation("UserBookings")
  providerBookings  ServiceBooking[]      @relation("ProviderBookings")
  reviews           ServiceReview[]
  progress          ContentProgress[]
  bio               String?
  specialties       String[]              @default([])
  experience        Int                   @default(0)
  loyaltyPoints     Int                   @default(0)
  twoFactorEnabled  Boolean               @default(false)
  twoFactorAuth     TwoFactorAuth?
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String
  backupCodes String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Authenticator {
  id                String   @id @default(cuid())
  userId            String
  credentialId      String   @unique
  credentialPublicKey String
  counter           Int      @default(0)
  transports        String[] // Stored as JSON array
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model Challenge {
  id        String   @id @default(cuid())
  userId    String
  token     String
  type      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Content {
  id          String            @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  authorId    String
  url         String?
  type        String
  author      User              @relation(fields: [authorId], references: [id])
  progress    ContentProgress[]

  @@index([authorId])
}

model ContentProgress {
  id           String   @id @default(cuid())
  contentId    String
  userId       String
  lastAccessed DateTime @default(now())
  progress     Float
  content      Content  @relation(fields: [contentId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([contentId, userId])
  @@index([userId])
  @@index([contentId])
}

model ServiceBooking {
  id         String        @id @default(cuid())
  userId     String
  providerId String
  serviceId  String
  date       DateTime
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  provider   User          @relation("ProviderBookings", fields: [providerId], references: [id])
  service    BeautyService @relation(fields: [serviceId], references: [id])
  user       User          @relation("UserBookings", fields: [userId], references: [id])

  @@index([userId])
  @@index([providerId])
  @@index([serviceId])
}

model ServiceReview {
  id        String        @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  serviceId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  service   BeautyService @relation(fields: [serviceId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([serviceId])
}

model BeautyService {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    String
  bookings    ServiceBooking[]
  reviews     ServiceReview[]
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
